using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace FUICompiler
{
    public static class Utility
    {
        public const string BindingContextDefaultNamespace = "__DataBindingGenerated";

        public static string FileHead = @"
//This file was generated by FUICompiler
//The purpose is to achieve binding functionality
//FUICompiler:https://github.com/fujisheng/FUICompiler.git
//FUI:https://github.com/fujisheng/FUI.git
//If you have any questions, please raise them on GitHub


";

        /// <summary>
        /// 将一个字符串转换成合法的C#名字
        /// </summary>
        /// <param name="str"></param>
        /// <returns></returns>
        public static string ToCSharpName(this string str)
        {
            return str.Replace("<", "_")
                .Replace(">", "_")
                .Replace(".", "_")
                .Replace("/", "_")
                .Replace("\\", "_")
                .Replace(":", "_")
                .Replace(";", "_")
                .Replace(" ", "")
                .Replace("'", "_")
                .Replace("@", "")
                .Replace("&", "")
                .Replace("(", "")
                .Replace(")", "");
        }

        /// <summary>
        /// 格式化代码
        /// </summary>
        /// <param name="text">代码</param>
        /// <returns></returns>
        public static string NormalizeCode(string text)
        {
            return CSharpSyntaxTree.ParseText(text).GetRoot().NormalizeWhitespace().ToFullString();
        }

        /// <summary>
        /// 获取属性更改委托名字
        /// </summary>
        /// <param name="propertyName">属性名</param>
        /// <returns></returns>
        public static string GetPropertyChangedDelegateName(string propertyName)
        {
            return $"_{propertyName}_Changed";
        }

        /// <summary>
        /// 获取属性BackingField名字
        /// </summary>
        /// <param name="propertyName">属性名</param>
        /// <returns></returns>
        public static string GetPropertyBackingFieldName(string propertyName)
        {
            return $"_{propertyName}_BackingField";
        }

        /// <summary>
        /// 通过特性绑定的特性名
        /// </summary>
        static string[] BindingAttributes = new string[]
        {
            "Binding",
            "BindingAttribute",
            "FUI.Binding",
            "FUI.BindingAttribute"
        };

        /// <summary>
        /// 尝试获取绑定特性
        /// </summary>
        /// <param name="classDeclaration">类型定义文件</param>
        /// <param name="attributes">特性</param>
        /// <returns></returns>
        public static bool TryGetClassBindingAttribute(ClassDeclarationSyntax classDeclaration, out List<AttributeSyntax> attributes)
        {
            attributes = new List<AttributeSyntax>();
            var classAttributes = classDeclaration.AttributeLists.ToList();
            foreach (var att in classAttributes)
            {
                foreach (var node in att.ChildNodes().OfType<AttributeSyntax>())
                {
                    foreach (var id in node.ChildNodes().OfType<IdentifierNameSyntax>())
                    {
                        if (BindingAttributes.Contains(id.ToString()))
                        {
                            attributes.Add(node);
                        }
                    }
                }
            }
            return attributes.Count > 0;
        }

        /// <summary>
        /// 尝试获取属性绑定特性
        /// </summary>
        /// <param name="propertyDeclaration"></param>
        /// <param name="attributes"></param>
        /// <returns></returns>
        public static bool TryGetPropertyBindingAttribute(PropertyDeclarationSyntax propertyDeclaration, out List<AttributeSyntax> attributes)
        {
            attributes = new List<AttributeSyntax>();
            var propertyAttributes = propertyDeclaration.AttributeLists.ToList();
            foreach (var att in propertyAttributes)
            {
                foreach (var node in att.ChildNodes().OfType<AttributeSyntax>())
                {
                    foreach (var id in node.ChildNodes().OfType<IdentifierNameSyntax>())
                    {
                        if (BindingAttributes.Contains(id.ToString()))
                        {
                            attributes.Add(node);
                        }
                    }
                }
            }
            return attributes.Count > 0;
        }


        /// <summary>
        /// 通过特性绑定的特性名
        /// </summary>
        static string[] CommandBindingAttributes = new string[]
        {
            "Command",
            "CommandAttribute",
            "FUI.Command",
            "FUI.CommandAttribute"
        };

        /// <summary>
        /// 尝试获取命令绑定特性
        /// </summary>
        /// <param name="memberDeclarationSyntax">方法定义</param>
        /// <param name="attributes">特性列表</param>
        /// <returns></returns>
        public static bool TryGetCommandBindingAttribute(MemberDeclarationSyntax memberDeclarationSyntax, out List<AttributeSyntax> attributes)
        {
            attributes = new List<AttributeSyntax>();
            var methodAttributes = memberDeclarationSyntax.AttributeLists.ToList();
            foreach (var att in methodAttributes)
            {
                foreach (var node in att.ChildNodes().OfType<AttributeSyntax>())
                {
                    foreach (var id in node.ChildNodes().OfType<IdentifierNameSyntax>())
                    {
                        if (CommandBindingAttributes.Contains(id.ToString()))
                        {
                            attributes.Add(node);
                        }
                    }
                }
            }

            return attributes.Count > 0;
        }

        /// <summary>
        /// 获取Event对应的方法名
        /// </summary>
        /// <param name="eventName">event名字</param>
        /// <returns></returns>
        public static string GetEventMethodName(string eventName)
        {
            return $"__EventMethod_{eventName}";
        }

        /// <summary>
        /// 获取或者创建一个文件夹
        /// </summary>
        /// <param name="path">路径</param>
        /// <returns></returns>
        public static DirectoryInfo GetOrCreateDirectory(string path)
        {
            if (Directory.Exists(path))
            {
                return new DirectoryInfo(path);
            }

            return Directory.CreateDirectory(path);
        }

        public const string ValueConverterFullName = "FUI.IValueConverter";

        /// <summary>
        /// 获取绑定上下文类型名
        /// </summary>
        /// <param name="contextInfo">上下文信息</param>
        /// <returns></returns>
        public static string GetBindingContextTypeName(ContextBindingInfo contextInfo)
        {
            return $"{contextInfo.viewModelType.ToCSharpName()}_{contextInfo.viewName}_Binding_Generated";
        }

        /// <summary>
        /// 获取绑定上下文类型全称
        /// </summary>
        /// <param name="contextInfo">上下文信息</param>
        /// <returns></returns>
        public static string GetBindingContextTypeFullName(ContextBindingInfo contextInfo)
        {
            return $"{BindingContextDefaultNamespace}.{GetBindingContextTypeName(contextInfo)}";
        }

        /// <summary>
        /// 转换成位置信息
        /// </summary>
        /// <param name="location"></param>
        /// <returns></returns>
        public static LocationInfo ToLocationInfo(this Location location)
        {
            return new LocationInfo
            {
                column = location.GetLineSpan().StartLinePosition.Character,
                line = location.GetLineSpan().StartLinePosition.Line,
                path = location.SourceTree.FilePath
            };
        }
    }
}
